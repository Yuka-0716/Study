#フォルダ内のMSMファイルをすべて読み込んで、任意の地点のデータを抽出し、出力ファイルに書き出す。
import netCDF4 as nc
import numpy as np
import os
from datetime import datetime, timedelta

# 入力フォルダと出力フォルダ
input_folder = "E:/Master/MSM(rawdata)/2022"
output_folder = "E:/Master/MSM/2022"

# 出力フォルダが存在しない場合は作成
os.makedirs(output_folder, exist_ok=True)

# 緯度・経度のターゲット値(アメダス)
target_lat, target_lon = 32.442, 130.157

# 入力フォルダ内の全NetCDFファイルを取得
nc_files = sorted([f for f in os.listdir(input_folder) if f.endswith(".nc")])

# 各ファイルに対して処理を実行
for nc_file in nc_files:
    input_file = os.path.join(input_folder, nc_file)
    output_file = os.path.join(output_folder, f"{os.path.splitext(nc_file)[0]}data.txt")

    with nc.Dataset(input_file, 'r') as ds:
        # 緯度・経度のデータを取得
        latitudes = ds.variables['lat'][:]
        longitudes = ds.variables['lon'][:]

        # 最も近い緯度・経度のインデックスを取得
        lat_index = np.abs(latitudes - target_lat).argmin()
        lon_index = np.abs(longitudes - target_lon).argmin()

        # 取得する変数リスト
        variables_to_extract = [
            'psea', 'sp', 'u', 'v', 'temp', 'rh', 
            'r1h', 'ncld_upper', 'ncld_mid', 'ncld_low', 'ncld', 'dswrf'
        ]

        # 時間情報を取得
        time_values = ds.variables['time'][:]
        time_units = ds.variables['time'].units  # "hours since YYYY-MM-DD HH:MM:SS+00:00"

        # 時刻の基準（NetCDFのtime変数の基準時刻を取得）
        base_time_str = time_units.split("since")[-1].strip()
        base_datetime = datetime.strptime(base_time_str, "%Y-%m-%d %H:%M:%S%z")

        # スケール係数とオフセットの適用関数
        def apply_scale_offset(var, values):
            scale_factor = getattr(var, 'scale_factor', 1.0)
            add_offset = getattr(var, 'add_offset', 0.0)
            return values * scale_factor + add_offset

        # 欠損値をチェックする関数
        def check_missing_value(var, value):
            fill_value = getattr(var, '_FillValue', None)
            missing_value = getattr(var, 'missing_value', None)
            if np.ma.is_masked(value) or value in [fill_value, missing_value]:
                return "N/A"
            return str(value)

        # 出力ファイルにデータを書き込む
        with open(output_file, 'w') as f:
            # 各時間ステップごとにデータを取得（ヘッダーなし）
            for t_idx, time_val in enumerate(time_values):
                # 時間を HHMM 形式の整数に変換
                current_time = base_datetime + timedelta(hours=float(time_val))
                hhmm = current_time.strftime("%H%M")  # "HHMM" 形式

                data_line = [hhmm]  # HHMM形式の時間情報

                for var_name in variables_to_extract:
                    var_data = ds.variables[var_name]
                    raw_value = var_data[t_idx, lat_index, lon_index]  # 時間・位置でデータ取得
                    scaled_value = apply_scale_offset(var_data, raw_value)  # スケール適用
                    data_line.append(check_missing_value(var_data, scaled_value))  # 欠損値チェック

                # 出力ファイルにデータを書き込む
                f.write(" ".join(data_line) + "\n")

    print(f"Processed {nc_file} -> {output_file}")

print("All NetCDF files processed successfully.")
